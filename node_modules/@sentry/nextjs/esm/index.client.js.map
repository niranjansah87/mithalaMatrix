{"version":3,"file":"index.client.js","sourceRoot":"","sources":["../src/index.client.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAE,IAAI,IAAI,SAAS,EAAE,YAAY,IAAI,mBAAmB,EAAE,MAAM,eAAe,CAAC;AACvG,OAAO,EAAE,cAAc,EAAE,oCAAoC,EAAE,MAAM,iBAAiB,CAAC;AAEvF,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AACjE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,cAAc,EAAoB,MAAM,0BAA0B,CAAC;AAE5E,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AAEjE,MAAM,CAAC,IAAM,YAAY,yBAAQ,mBAAmB,KAAE,cAAc,gBAAA,GAAE,CAAC;AAEvE,kGAAkG;AAClG,kGAAkG;AAClG,QAAQ;AACR,EAAE;AACF,qEAAqE;AACrE,EAAE;AACF,iDAAiD;AACjD,sDAAsD;AACtD,EAAE;AACF,2FAA2F;AAC3F,iFAAiF;AACjF,EAAE;AACF,mDAAmD;AACnD,yCAAyC;AACzC,OAAO,EAAE,cAAc,EAAE,CAAC;AAE1B,qEAAqE;AACrE,MAAM,UAAU,IAAI,CAAC,OAAsB;IACzC,aAAa,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5C,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;IAElE,wEAAwE;IACxE,IAAM,YAAY,GAChB,OAAO,CAAC,gBAAgB,KAAK,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS;QAC3E,CAAC,CAAC,OAAO,CAAC,YAAY;QACtB,CAAC,CAAC,wBAAwB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAErD,SAAS,uBACJ,OAAO,KACV,YAAY,cAAA,IACZ,CAAC;IACH,cAAc,CAAC,UAAA,KAAK;QAClB,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnC,KAAK,CAAC,iBAAiB,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,KAAK,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAA7E,CAA6E,CAAC,CAAC;IAClH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,IAAM,gCAAgC,GAAG,IAAI,cAAc,CAAC;IAC1D,cAAc,WAAM,oCAAoC,CAAC,cAAc,GAAE,UAAU,EAAC;IACpF,sBAAsB,EAAE,yBAAyB;CAClD,CAAC,CAAC;AAEH,SAAS,wBAAwB,CAAC,YAA+B;IAC/D,IAAI,YAAY,EAAE;QAChB,OAAO,cAAc,CAAC,gCAAgC,EAAE,YAAY,EAAE;YACpE,cAAc,EAAE,EAAE,OAAO,EAAE,gCAAgC,EAAE,KAAK,EAAE,yBAAyB,EAAE;SAChG,CAAC,CAAC;KACJ;SAAM;QACL,OAAO,CAAC,gCAAgC,CAAC,CAAC;KAC3C;AACH,CAAC","sourcesContent":["import { configureScope, init as reactInit, Integrations as BrowserIntegrations } from '@sentry/react';\nimport { BrowserTracing, defaultRequestInstrumentationOptions } from '@sentry/tracing';\n\nimport { nextRouterInstrumentation } from './performance/client';\nimport { buildMetadata } from './utils/metadata';\nimport { NextjsOptions } from './utils/nextjsOptions';\nimport { addIntegration, UserIntegrations } from './utils/userIntegrations';\n\nexport * from '@sentry/react';\nexport { nextRouterInstrumentation } from './performance/client';\n\nexport const Integrations = { ...BrowserIntegrations, BrowserTracing };\n\n// This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import `BrowserTracing` like this:\n//\n// import { Integrations } from '@sentry/nextjs';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/nextjs';\n// const instance = new BrowserTracing();\nexport { BrowserTracing };\n\n/** Inits the Sentry NextJS SDK on the browser with the React SDK. */\nexport function init(options: NextjsOptions): void {\n  buildMetadata(options, ['nextjs', 'react']);\n  options.environment = options.environment || process.env.NODE_ENV;\n\n  // Only add BrowserTracing if a tracesSampleRate or tracesSampler is set\n  const integrations =\n    options.tracesSampleRate === undefined && options.tracesSampler === undefined\n      ? options.integrations\n      : createClientIntegrations(options.integrations);\n\n  reactInit({\n    ...options,\n    integrations,\n  });\n  configureScope(scope => {\n    scope.setTag('runtime', 'browser');\n    scope.addEventProcessor(event => (event.type === 'transaction' && event.transaction === '/404' ? null : event));\n  });\n}\n\nconst defaultBrowserTracingIntegration = new BrowserTracing({\n  tracingOrigins: [...defaultRequestInstrumentationOptions.tracingOrigins, /^(api\\/)/],\n  routingInstrumentation: nextRouterInstrumentation,\n});\n\nfunction createClientIntegrations(integrations?: UserIntegrations): UserIntegrations {\n  if (integrations) {\n    return addIntegration(defaultBrowserTracingIntegration, integrations, {\n      BrowserTracing: { keyPath: 'options.routingInstrumentation', value: nextRouterInstrumentation },\n    });\n  } else {\n    return [defaultBrowserTracingIntegration];\n  }\n}\n"]}