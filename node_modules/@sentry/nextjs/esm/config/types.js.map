{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/config/types.ts"],"names":[],"mappings":"","sourcesContent":["import { SentryCliPluginOptions } from '@sentry/webpack-plugin';\nimport { WebpackPluginInstance } from 'webpack';\n\nexport type SentryWebpackPluginOptions = SentryCliPluginOptions;\nexport type SentryWebpackPlugin = WebpackPluginInstance & { options: SentryWebpackPluginOptions };\n\n/**\n * Overall Nextjs config\n */\n\nexport type ExportedNextConfig = Partial<NextConfigObject> | NextConfigFunction;\n\nexport type NextConfigObject = {\n  // custom webpack options\n  webpack: WebpackConfigFunction;\n  // whether to build serverless functions for all pages, not just API routes\n  target: 'server' | 'experimental-serverless-trace';\n  // the output directory for the built app (defaults to \".next\")\n  distDir: string;\n  sentry?: {\n    disableServerWebpackPlugin?: boolean;\n    disableClientWebpackPlugin?: boolean;\n    hideSourceMaps?: boolean;\n  };\n} & {\n  // other `next.config.js` options\n  [key: string]: unknown;\n};\n\nexport type NextConfigFunction = (\n  phase: string,\n  defaults: { defaultConfig: NextConfigObject },\n) => Partial<NextConfigObject>;\n\n/**\n * Webpack config\n */\n\n// the format for providing custom webpack config in your nextjs options\nexport type WebpackConfigFunction = (config: WebpackConfigObject, options: BuildContext) => WebpackConfigObject;\n\nexport type WebpackConfigObject = {\n  devtool?: string;\n  plugins?: Array<WebpackPluginInstance | SentryWebpackPlugin>;\n  entry: WebpackEntryProperty;\n  output: { filename: string; path: string };\n  target: string;\n  context: string;\n  resolve?: {\n    alias?: { [key: string]: string | boolean };\n  };\n} & {\n  // other webpack options\n  [key: string]: unknown;\n};\n\n// Information about the current build environment\nexport type BuildContext = {\n  dev: boolean;\n  isServer: boolean;\n  buildId: string;\n  dir: string;\n  config: NextConfigObject;\n  webpack: { version: string };\n};\n\n/**\n * Webpack `entry` config\n */\n\n// For our purposes, the value for `entry` is either an object, or an async function which returns such an object\nexport type WebpackEntryProperty = EntryPropertyObject | EntryPropertyFunction;\n\nexport type EntryPropertyObject = {\n  [key: string]: EntryPointValue;\n};\n\nexport type EntryPropertyFunction = () => Promise<EntryPropertyObject>;\n\n// Each value in that object is either a string representing a single entry point, an array of such strings, or an\n// object containing either of those, along with other configuration options. In that third case, the entry point(s) are\n// listed under the key `import`.\nexport type EntryPointValue = string | Array<string> | EntryPointObject;\nexport type EntryPointObject = { import: string | Array<string> };\n"]}