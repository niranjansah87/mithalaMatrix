{"version":3,"file":"index.server.js","sourceRoot":"","sources":["../src/index.server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Carrier, getHubFromCarrier, getMainCarrier } from '@sentry/hub';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { configureScope, getCurrentHub, init as nodeInit, Integrations } from '@sentry/node';\nimport { hasTracingEnabled } from '@sentry/tracing';\nimport { Event } from '@sentry/types';\nimport { escapeStringForRegex, logger } from '@sentry/utils';\nimport * as domainModule from 'domain';\nimport * as path from 'path';\n\nimport { buildMetadata } from './utils/metadata';\nimport { NextjsOptions } from './utils/nextjsOptions';\nimport { addIntegration } from './utils/userIntegrations';\n\nexport * from '@sentry/node';\n\n// Here we want to make sure to only include what doesn't have browser specifics\n// because or SSR of next.js we can only use this.\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\n\ntype GlobalWithDistDir = typeof global & { __rewriteFramesDistDir__: string };\nconst domain = domainModule as typeof domainModule & { active: (domainModule.Domain & Carrier) | null };\n\n// During build, the main process is invoked by\n//   `node next build`\n// and child processes are invoked as\n//   `node <path>/node_modules/.../jest-worker/processChild.js`.\n// The former is (obviously) easy to recognize, but the latter could happen at runtime as well. Fortunately, the main\n// process hits this file before any of the child processes do, so we're able to set an env variable which the child\n// processes can then check. During runtime, the main process is invoked as\n//   `node next start`\n// or\n//   `node /var/runtime/index.js`,\n// so we never drop into the `if` in the first place.\nlet isBuild = false;\nif (process.argv.includes('build') || process.env.SENTRY_BUILD_PHASE) {\n  process.env.SENTRY_BUILD_PHASE = 'true';\n  isBuild = true;\n}\n\nconst isVercel = !!process.env.VERCEL;\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NextjsOptions): void {\n  if (options.debug) {\n    logger.enable();\n  }\n\n  logger.log('Initializing SDK...');\n\n  if (sdkAlreadyInitialized()) {\n    logger.log('SDK already initialized');\n    return;\n  }\n\n  buildMetadata(options, ['nextjs', 'node']);\n  options.environment = options.environment || process.env.NODE_ENV;\n  addServerIntegrations(options);\n  // Right now we only capture frontend sessions for Next.js\n  options.autoSessionTracking = false;\n\n  // In an ideal world, this init function would be called before any requests are handled. That way, every domain we\n  // use to wrap a request would inherit its scope and client from the global hub. In practice, however, handling the\n  // first request is what causes us to initialize the SDK, as the init code is injected into `_app` and all API route\n  // handlers, and those are only accessed in the course of handling a request. As a result, we're already in a domain\n  // when `init` is called. In order to compensate for this and mimic the ideal world scenario, we stash the active\n  // domain, run `init` as normal, and then restore the domain afterwards, copying over data from the main hub as if we\n  // really were inheriting.\n  const activeDomain = domain.active;\n  domain.active = null;\n\n  nodeInit(options);\n\n  configureScope(scope => {\n    scope.setTag('runtime', 'node');\n    if (isVercel) {\n      scope.setTag('vercel', true);\n    }\n\n    scope.addEventProcessor(filterTransactions);\n  });\n\n  if (activeDomain) {\n    const globalHub = getHubFromCarrier(getMainCarrier());\n    const domainHub = getHubFromCarrier(activeDomain);\n\n    // apply the changes made by `nodeInit` to the domain's hub also\n    domainHub.bindClient(globalHub.getClient());\n    domainHub.getScope()?.update(globalHub.getScope());\n    // `scope.update()` doesnâ€™t copy over event processors, so we have to add it manually\n    domainHub.getScope()?.addEventProcessor(filterTransactions);\n\n    // restore the domain hub as the current one\n    domain.active = activeDomain;\n  }\n\n  logger.log('SDK successfully initialized');\n}\n\nfunction sdkAlreadyInitialized(): boolean {\n  const hub = getCurrentHub();\n  return !!hub.getClient();\n}\n\nfunction addServerIntegrations(options: NextjsOptions): void {\n  // This value is injected at build time, based on the output directory specified in the build config\n  const distDirName = (global as GlobalWithDistDir).__rewriteFramesDistDir__ || '.next';\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(process.cwd(), distDirName);\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(escapeStringForRegex(distDirAbsPath));\n\n  const defaultRewriteFramesIntegration = new RewriteFrames({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  if (options.integrations) {\n    options.integrations = addIntegration(defaultRewriteFramesIntegration, options.integrations);\n  } else {\n    options.integrations = [defaultRewriteFramesIntegration];\n  }\n\n  if (hasTracingEnabled(options)) {\n    const defaultHttpTracingIntegration = new Integrations.Http({ tracing: true });\n    options.integrations = addIntegration(defaultHttpTracingIntegration, options.integrations, {\n      Http: { keyPath: '_tracing', value: true },\n    });\n  }\n}\n\nfunction filterTransactions(event: Event): Event | null {\n  return event.type === 'transaction' && event.transaction === '/404' ? null : event;\n}\n\nexport { withSentryConfig } from './config';\nexport { SentryWebpackPluginOptions } from './config/types';\nexport { withSentry } from './utils/withSentry';\n\n// Wrap various server methods to enable error monitoring and tracing. (Note: This only happens for non-Vercel\n// deployments, because the current method of doing the wrapping a) crashes Next 12 apps deployed to Vercel and\n// b) doesn't work on those apps anyway. We also don't do it during build, because there's no server running in that\n// phase.)\nif (!isVercel && !isBuild) {\n  // Dynamically require the file because even importing from it causes Next 12 to crash on Vercel.\n  // In environments where the JS file doesn't exist, such as testing, import the TS file.\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { instrumentServer } = require('./utils/instrumentServer.js');\n    instrumentServer();\n  } catch (err) {\n    logger.warn(`Error: Unable to instrument server for tracing. Got ${err}.`);\n  }\n}\n"]}