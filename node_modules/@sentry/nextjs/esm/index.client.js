import { __assign, __read, __spread } from "tslib";
import { configureScope, init as reactInit, Integrations as BrowserIntegrations } from '@sentry/react';
import { BrowserTracing, defaultRequestInstrumentationOptions } from '@sentry/tracing';
import { nextRouterInstrumentation } from './performance/client';
import { buildMetadata } from './utils/metadata';
import { addIntegration } from './utils/userIntegrations';
export * from '@sentry/react';
export { nextRouterInstrumentation } from './performance/client';
export var Integrations = __assign(__assign({}, BrowserIntegrations), { BrowserTracing: BrowserTracing });
// This is already exported as part of `Integrations` above (and for the moment will remain so for
// backwards compatibility), but that interferes with treeshaking, so we also export it separately
// here.
//
// Previously we expected users to import `BrowserTracing` like this:
//
// import { Integrations } from '@sentry/nextjs';
// const instance = new Integrations.BrowserTracing();
//
// This makes the integrations unable to be treeshaken though. To address this, we now have
// this individual export. We now expect users to consume BrowserTracing like so:
//
// import { BrowserTracing } from '@sentry/nextjs';
// const instance = new BrowserTracing();
export { BrowserTracing };
/** Inits the Sentry NextJS SDK on the browser with the React SDK. */
export function init(options) {
    buildMetadata(options, ['nextjs', 'react']);
    options.environment = options.environment || process.env.NODE_ENV;
    // Only add BrowserTracing if a tracesSampleRate or tracesSampler is set
    var integrations = options.tracesSampleRate === undefined && options.tracesSampler === undefined
        ? options.integrations
        : createClientIntegrations(options.integrations);
    reactInit(__assign(__assign({}, options), { integrations: integrations }));
    configureScope(function (scope) {
        scope.setTag('runtime', 'browser');
        scope.addEventProcessor(function (event) { return (event.type === 'transaction' && event.transaction === '/404' ? null : event); });
    });
}
var defaultBrowserTracingIntegration = new BrowserTracing({
    tracingOrigins: __spread(defaultRequestInstrumentationOptions.tracingOrigins, [/^(api\/)/]),
    routingInstrumentation: nextRouterInstrumentation,
});
function createClientIntegrations(integrations) {
    if (integrations) {
        return addIntegration(defaultBrowserTracingIntegration, integrations, {
            BrowserTracing: { keyPath: 'options.routingInstrumentation', value: nextRouterInstrumentation },
        });
    }
    else {
        return [defaultBrowserTracingIntegration];
    }
}
//# sourceMappingURL=index.client.js.map