"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createImportSpecifier = createImportSpecifier;
exports.getExportedName = getExportedName;
exports.isDeclaration = isDeclaration;

// eslint-disable-line import/no-extraneous-dependencies
function getExportedName(ts, node) {
  if (!node.modifiers) {
    return null;
  }

  if (!node.modifiers.some(m => m.kind === ts.SyntaxKind.ExportKeyword)) {
    return null;
  }

  if (node.modifiers.some(m => m.kind === ts.SyntaxKind.DefaultKeyword)) {
    return 'default';
  }

  return node.name.text;
}

function isDeclaration(ts, node) {
  return ts.isFunctionDeclaration(node) || ts.isClassDeclaration(node) || ts.isInterfaceDeclaration(node) || ts.isEnumDeclaration(node) || ts.isTypeAliasDeclaration(node);
}

function createImportSpecifier(ts, propertyName, name, isTypeOnly = false) {
  const [majorVersion, minorVersion] = ts.versionMajorMinor.split('.').map(num => parseInt(num, 10)); // The signature of createImportSpecifier had a breaking change in Typescript 4.5.
  // see: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#type-modifiers-on-import-names

  if (majorVersion > 4 || majorVersion === 4 && minorVersion >= 5) {
    // $FlowFixMe
    return ts.createImportSpecifier(isTypeOnly, propertyName, name);
  } else {
    return ts.createImportSpecifier(propertyName, name);
  }
}